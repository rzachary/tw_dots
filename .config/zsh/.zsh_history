cd ..
ls
ls -al
cdt
cd Tools/tw_dots
ls
ls -al
nvim .
nvim .
l
nvim .
cd ..
cd ..
ls
ll
la
nvim .zshrc
source .zshenv
cd ..
ls
mkdir i18n-test
cd i18n-test
ls
touch i18n_api.py
zed
ls
python -m venv .venv && source .venv/bin/activate   # optional virtualâ€ƒ±env\

python3 -m venv .venv && source .venv/bin/activate   # optional virtualâ€ƒ±env\

pip install "fastapi[all]" uvicorn\

uvicorn i18n_api:app --reload\

pip install "fastapi[all]" uvicorn google-cloud-translate==3.*
pip install "fastapi[all]" uvicorn google-cloud-translate
export GOOGLE_APPLICATION_CREDENTIALS=.local/share/gcloud/prototype-project-name-0db3-caae61efbee0.json\
export PROJECT_ID=prototype-project-name
uvicorn i18n_api:app --reload\

codex
brew install codex
codex
gcloud init
gcloud auth application-default print-access-token
gcloud auth application-default print-access-token
cd ~
ls
ls -al
ls .local
cp Downloads/prototype-project-name-0db3-caae61efbee0.json .local/share/gcloud/
mkdir .local/share/gcloud/
cp Downloads/prototype-project-name-0db3-caae61efbee0.json .local/share/gcloud/
.local/share/gcloud/prototype-project-name-0db3-caae61efbee0.js
export GOOGLE_APPLICATION_CREDENTIALS=.local/share/gcloud/prototype-project-name-0db3-caae61efbee0.json\
export PROJECT_ID=prototype-project-name
ls
nvim .zshrc
source .zshrc
source .zshrc
cdw
ls
cd i18n-test
codex
cd ..
ls
cd backstage
ls
cd ..
ls
cd haiven
ls
cd ..
ls
cd auto_infra_vialto
ls
touch claude.md
zed .
brew install terraform
terraform version
cd ..
ls 
git clone git@github.com:twlabs/AIFSET-SDLC-Starter.git
git clone git@github.com:twlabs/AIFSET-SDLC-Starter.git
cd ~
la
ls -al
nvim .zshrc
psql -v
nvim .zshrc
cd !
nvim .zshrc
cd ~
nvim .zshrc
source .zshrc
cdw
ls
cd backstage
ls
cd ..
rm -rdf backstage
git clone git@github.com:rzachary/backstage.git
cd ..
cdw
cd auto_infra_vialto
ls
ls
mkdir backstage
cd backstage
ls
cd ..
rm -rdf backstage
npx @backstage/create-app@latest\

cd backstage
ls
yarn dev
yarn install
yarn -help
yarn help
yarn install
ls
cd ..
rm -rdf backstage
yarn version
brew update yarn
brew upgrade yarn
npx @backstage/create-app@latest\
\

yarn explain peer-requirements
yarn install webpack
yarn add webpack
yarn install
cd backstage
yarn add webpack
yarn install
npm vesion
npm version
brew upgrade npm
yarn install
yarn add isolated-vm
sudo xcode-select --install\

brew upgrade nodejs
brew upgrade node
npm install -g node-gyp
yarn install
python3
python3 -version
python3 -h
python3 --help-env
brew info python
source ~/.zshrc
yarn install
xcode-select --install
npm install -g node-gyp
yarn install
clang++ --version
xcode-select --update
node-gyp configure
npm install -g node-gyp --verbose
node-gyp configure --verbose
yarn install
npm install -g isolated-vm
yarn install
nvim /private/var/folders/g_/wwmndrvx2wgf23_y6sym2gtm0000gn/T/xfs-4ce8feff/build.log
ls
cd build
ls
nvim config.gypi
npm cache-clean --force
npm cache clean --force
ls
cd ..
ls
npm cache clean --force
rm -rdf node_modules
g++ --version
xcode-select --install
softwareupdate
softwareupdate --list
brew install gcc
brew reinstall gcc
yarn install
nvm install lts/iron
brew install nvm
yarn install
nvm install lts/iron
npm install -g isolated-vm
node --no-node-snapshot
ls
nvim package.json
cd node_modules
ls
cd ..
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.3/install.sh | bash
cd ..
cd haiven
git pull
zed .
nvim /private/var/folders/g_/wwmndrvx2wgf23_y6sym2gtm0000gn/T/xfs-ddd4d52a/build.log
cd ..
ls
git clone git@github.com:twplatformlabs/harvest-archive.git
clear
ls
az --version
az upgrade
az --version
az login
az help
git clone git@github.com:rzachary/auto_infra_vialto.git
cd auto_infra_vialto
ls
touch Readme.md
ls
ls
claude
ls
ls
cd policies
ls
cd opa
ls
cd ..
cd ..
ls
ls
ls
terraform version
az account show
az account show
az ad sp create-for-rbac --role="Contributor" --scopes="/subscriptions/d02d331d-d44f-4370-b39b-eea3ae0392a7"
nvim ~/.zshrc
source ~/.zshrc
ls
mkdir terraform_test
mv azure_test.tf ./terraform_test
cd terraform_test
terraform ini
terraform init
terraform validate
terraform apply
cd ..
git add .
git status
git commit -m "initial creation of all the starting infrastructure for this demo environment"
git push
ls
mkdir -p .github/workflows
brew install infracost
az postgres flexible-server create --name backstagedb-empc --resource-group rg-empc-platform-ops-dev\

az postgres flexible-server show --name backstagedb-empc --resource-group rg-empc-platform-ops-dev
az postgres flexible-server update --resource-group rg-empc-platform-ops-dev --name backstagedb-empc --admin-password 69MpyrF6dLPKGx!
brew install postgresql@15
psql --version
psql
brew install libpq
psql -v
brew install psql
brew link --force libpq
echo 'export PATH="/opt/homebrew/opt/libpq/bin:$PATH"' >> /Users/rickeyzachary/.config/zsh/.zshrc
psql -v
psql --version
psql -h backstagedb-empc.postgres.database.azure.com -U malekitten6 flexibleserverdb
psql -h backstagedb-empc.postgres.database.azure.com -U malekitten6 
psql -h backstagedb-empc.postgres.database.azure.com -U malekitten6 postgres
psql -h backstagedb-empc.postgres.database.azure.com -U malekitten6 postgres
az postgres flexible-server db create --resource-group backstage --server-name backstagedb-empc --database-name backstage_plugin_catalog\

az postgres flexible-server db create --resource-group rg-empc-platform-ops-dev\
--server-name backstagedb-empc --database-name backstage_plugin_catalog\

az postgres flexible-server db create --resource-group rg-empc-platform-ops-dev \\
 --server-name backstagedb-empc --database-name backstage_plugin_catalog\

az postgres flexible-server parameter set --resource-group rg-empc-platform-ops-dev --server-name backstagedb-empc --name require_secure_transport --value off\

npm version
nvim ~/.zshrc
source ~/.zshrc
claude
claude
gemini
gemini
gemini
gemini
lsof -iTCP:8000\

kill -3 1335 1343
ps
lsof -iTCP:8000\

lsof
lsof -help
lsof -T
lsof -h
lsof -iTCP:8000\

ps
kill -3 1441 1440 1443 1495
ps
kill -3 74243
cdw
cd fantasy_drafter
ps
python3 -m venv venv-fantasydrafter
source venv-fantasydrafter/bin/activate
python3 -m backend.main
clear
nvim ~/.gemini/settings.json
nvim ~/.gemini/settings.json
zed ~/.gemini/settings.json
python3 -m backend.main
python3 -m backend.main
python3 -m backend.main
ls
rm -rdf fantasy_football.db
python3 scripts/setup_database.py
rm -rdf fantasy_football.db
rm -rdf fantasy_football.db
python3 scripts/setup_database.py
python scripts/import_data.py --historical data/historical.csv\

python scripts/import_data.py --historical ./historical.csv\

python scripts/import_data.py --historical ./historical_data.csv\

python scripts/import_data.py --historical ./historical_draft.csv\

python scripts/import_data.py --projections ./projections.csv\

python scripts/import_data.py --adp ./adp.csv\

python3 -m backend.main
cd ..
ls
cd backstage
git pull
ls
cd ..
ls
cd auto_infra_vialto
ls
cd ..
cd ai-test-harness
cd ..
cd AIFSET-SDLC-Starter-main
ls
zed .
python3 -m venv venv-aifset\

source venv-aifset/bin/activate
pip3 install -r requirements.txt
om
ls
source ~/.zshrc
streamlit run app.py
streamlit run app.py
streamlit run app.py
ps 
claude
clear
claude
claude
cd ui
yarn dev
nvm use 22
yarn dev
cd ..
ls
git clone git@github.com:twlabs/AIFSET-SDLC-Starter.git
git clone git@github.com:twlabs/AIFSET-SDLC-Starter.git
cd AIFSET-SDLC-Starter-main
streamlit run app.py
python3 -m venv venv-aifset\

source venv-aifset/bin/activate
streamlit run app.py
cd ..
ls
cd AIFSET-SDLC-Starter
ls
cd ..
source ~/.zshrc
cd AIFSET-SDLC-Starter-main
streamlit run app.py
cd ..
cd ..
ls
cdw
ls
cd AIFSET-SDLC-Starter-main
ls
ls
nvim README.md
deactivate\

ls
cd ..
git clone git@github.com:Azure-Samples/get-started-with-ai-agents.git
cd get-started-with-ai-agents
ls
code .
cd ...
cd ..
ls
git clone git@github.com:curity-tech-old/ui-monorepo.git
cd ui-monorepo
code .
cd ..
ls
cd fantasy_drafter
ls
python3 -m backend.main
python3 -m backend.main
python3 -m backend.main
rm -rdf fantasy_football.db
python3 scripts/setup_database.py
python3 scripts/import_data.py --historical ./historical_draft.csv
python3 scripts/import_data.py --projections ./projections.csv
python3 scripts/import_data.py --adp ./adp.csv
python3 -m backend.main
python3 -m backend.main
lsof -ti:8000
ls
python3 -m backend.main
python3 -m backend.main
cd ..
cd AIFSET-SDLC-Starter-main
git pull
cd ..
cd AIFSET-SDLC-Starter
git pull
streamlit run app.py
zed .
python3 -m venv venv-aifset\

source venv-aifset/bin/activate
pip install -r requirements.txt
streamlit run app.py
git pull
streamlit run app.py
cd ..
ls
mkdir vehicle-warranty-inspector
cd vehicle-warranty-inspector
code .
touch claude.md
cd ..
cd haiven
ls
git pull
cp app/.env.azure.template ./.env
nvim ~/.zshrc
cd ..
git clone git@github.com:tw-haiven/haiven-sample-knowledge-pack.git
ls
mv haiven-sample-knowledge-pack ./haiven/knowledge-pack
cd haiven
docker run \\
        -v ./haiven-tw-demo-knowledge-pack:/knowledge-pack \\
        --env-file .env \\
        -e AUTH_SWITCHED_OFF=true \\
        -e KNOWLEDGE_PACK_PATH=/knowledge-pack \\
        -p 8080:8080 \\
        ghcr.io/tw-haiven/haiven:main
docker run \\
        -v ./haiven-tw-demo-knowledge-pack:/knowledge-pack \\
        --env-file .env \\
        -e AUTH_SWITCHED_OFF=true \\
        -e KNOWLEDGE_PACK_PATH=/knowledge-pack \\
        -p 8080:8080 \\
        ghcr.io/tw-haiven/haiven:main
docker run \\
        -v ./knowledge-pack:/knowledge-pack \\
        --env-file .env \\
        -e AUTH_SWITCHED_OFF=true \\
        -e KNOWLEDGE_PACK_PATH=/knowledge-pack \\
        -p 8080:8080 \\
        ghcr.io/tw-haiven/haiven:main
brew install gitleaks pre-commit
nvm --version
poetry --version
./install_dev_dependencies.sh
cd ui
yarn install
node --version
brew upgrade node
brew upgrade yarn
yarn install
node --version
brew install node
brew reinstall node
node --version
nvim ~/.zshrc
nvim ~/.config/zsh/.zshrc
nvim ~/.config/zsh/.zprofile
nvim ~/.config/zsh/.zshrc
cd ~/.config/nvm
ls
nvim README.md
cd ..
ls
node --version
which node
cd nvm
ls
git status
git pull
git status
git pull --ff
git pull --rebase
git remote -v
git rebase --abort
cdw
cd haiven
cd ui
nvm use 24
nvm install 24
nvm install 22
nvm use 22
yarn install
yarn copy
poetry run init
cd ..
poetry run init
poetry run app
poetry run app
echo $KNOWLEDGE_PACK+PATH
echo $KNOWLEDGE_PACK_PATH
export KNOWLEDGE_PACK_PATH="./haiven-tw-demo-knowledge-pack/"
echo $KNOWLEDGE_PACK_PATH
poetry run app
export KNOWLEDGE_PACK_PATH="../haiven-tw-demo-knowledge-pack/"
poetry run app
poetry run app &
kill -9 35003
docker images
docker rmi haiven:main
docker rmi 449a983b6172:main
docker rmi ghcr.io/tw-haiven/haiven:main
docker ps
docker build -t haiven .
docker login
docker login
brew install docker-credential-helper
docker login
docker build -t haiven .
docker run \\
        -v ./haiven-tw-demo-knowledge-pack:/knowledge-pack \\
        --env-file .env \\
        -e AUTH_SWITCHED_OFF=true \\
        -e KNOWLEDGE_PACK_PATH=/knowledge-pack \\
        -p 8080:8080 \\
        haiven:latest
docker run \\
        -v ./haiven-tw-demo-knowledge-pack:/knowledge-pack \\
        --env-file .env \\
        -e AUTH_SWITCHED_OFF=true \\
        -e KNOWLEDGE_PACK_PATH=/knowledge-pack \\
        -p 8080:8080 \\
        haiven:latest
docker run \\
        -v ./haiven-tw-demo-knowledge-pack:/knowledge-pack \\
        --env-file .env \\
        -e AUTH_SWITCHED_OFF=true \\
        -e KNOWLEDGE_PACK_PATH=/knowledge-pack \\
        -p 8080:8080 \\
        haiven:latest
clear
docker run \\
        -v ./haiven-tw-demo-knowledge-pack:/knowledge-pack \\
        --env-file .env \\
        -e AUTH_SWITCHED_OFF=true \\
        -e KNOWLEDGE_PACK_PATH=/knowledge-pack \\
        -p 8080:8080 \\
        ghcr.io/tw-haiven/haiven:main
docker run \\
        -v ./haiven-tw-demo-knowledge-pack:/knowledge-pack \\
        --env-file .env \\
        -e AUTH_SWITCHED_OFF=true \\
        -e KNOWLEDGE_PACK_PATH=/knowledge-pack \\
        -p 8080:8080 \\
        ghcr.io/tw-haiven/haiven:main
docker run \\
        -v ./knowledge-pack:/knowledge-pack \\
        --env-file .env \\
        -e AUTH_SWITCHED_OFF=true \\
        -e KNOWLEDGE_PACK_PATH=/knowledge-pack \\
        -p 8080:8080 \\
        ghcr.io/tw-haiven/haiven:main
clear
r
clear
clear
git pull
docker run \\
        -v ./knowledge-pack:/knowledge-pack \\
        --env-file .env \\
        -e AUTH_SWITCHED_OFF=true \\
        -e KNOWLEDGE_PACK_PATH=/knowledge-pack \\
        -p 8080:8080 \\
        ghcr.io/tw-haiven/haiven:main
docker run \\
        -v ./knowledge-pack:/knowledge-pack \\
        --env-file .env \\
        -e AUTH_SWITCHED_OFF=true \\
        -e KNOWLEDGE_PACK_PATH=/knowledge-pack \\
        -p 8080:8080 \\
        ghcr.io/tw-haiven/haiven:main
docker run \\
        -v ./knowledge-pack:/knowledge-pack \\
        --env-file .env \\
        -e AUTH_SWITCHED_OFF=true \\
        -e KNOWLEDGE_PACK_PATH=/knowledge-pack \\
        -p 8080:8080 \\
        haiven:latest
git pull
cd ..
ls
haiven
cd haiven
docker build -t haiven .
docker run \\
        -v ./knowledge-pack:/knowledge-pack \\
        --env-file .env \\
        -e AUTH_SWITCHED_OFF=true \\
        -e KNOWLEDGE_PACK_PATH=/knowledge-pack \\
        -p 8080:8080 \\
        haiven:latest
cdw
cd vehicle-warranty-inspector
ls
ls
claude
ls
cdw
ls
cd vehicle-warranty-inspector
ls
cd ..
ks
ls
cd fantasy_drafter
ls
claude
cd ..
cd llm-evaluator
ls
cd ..
ls
mkdir llm-evaluator
cd llm-evaluator
touch claude.md
zed .
claude
cd ..
ls 
cd AIFSET-SDLC-Starter-main
git pull
cd ..
cd AIFSET-SDLC-Starter
git pull
git stash
git pull
ls
cd ..
ls
cd Documents/Platform\ Capabilities
code .
claude
cd retail_test
mvn install
cd customer-account-service
mvn clean install
claude
mvn clean install
mvn spring-boot:run
claude
cdw
npm install -g @github/copilot
copilot
copilot
ls
cd backstage
ls
zed .
cd ..
ls
mkdir gcp-demo
cd gcp-demo
git clone git@github.com:backstage/backstage.git
git clone git@github.com:backstage/backstage.git
ls
git clone git@github.com:backstage/backstage.git
brew install helm
helm version
ls
git clone git@github.com:backstage/backstage.git
ls
npx @backstage/create-app@latest\
\

cd backstage-gcp && yarn start
ls
cd ..
touch readme.md
zed .
claude
terraform plan -out=fplan
terraform apply tfplan
gcloud auth application-default login
terraform plan -out=fplan
terraform apply fplan
gcloud container clusters get-credentials dev-devprod-cluster --region us-central1 --project prototype-project-name-0db3
  gcloud components install gke-gcloud-auth-plugin\

gcloud container clusters get-credentials dev-devprod-cluster --region us-central1 --project prototype-project-name-0db3
kubectl create namespace backstage
gcloud secrets versions access latest --secret=dev-backstage-db-password
gcloud auth configure-docker us-central1-docker.pkg.dev
cd backstage-gcp
yarn install --immutable
yarn install
yarn tsc
yarn build:backend
docker build -f packages/backend/Dockerfile . -t us-central1-docker.pkg.dev/prototype-project-name-0db3/dev-docker-repo/backstage:latest
docker build -f packages/backend/Dockerfile . -t us-central1-docker.pkg.dev/prototype-project-name-0db3/dev-docker-repo/backstage:latest
docker push us-central1-docker.pkg.dev/prototype-project-name-0db3/dev-docker-repo/backstage:latest
kubectl apply -f k8s/backstage/ -n backstage
cd ..
kubectl apply -f k8s/backstage/ -n backstage
kubectl port-forward -n backstage svc/backstage 7007:7007
kubectl port-forward -n backstage svc/backstage 7007:7007
kubectl port-forward -n backstage svc/backstage 7007:7007
kubectl port-forward -n backstage svc/backstage 7007:7007
kubectl -n list
kubectl namespaces
kubectl get namespaces
kubectl port-forward -n backstage svc/backstage 7007:7007
kubectl port-forward -n backstage svc/backstage 7007:7007
kubectl apply -f k8s/backstage/ -n backstage
kubectl port-forward -n backstage svc/backstage 7007:7007
kubectl logs -n backstage
kubectl logs backstage
kubectl logs svc/backstage
kubectl logs 
kubectl list
kubectl get
kubectl port-forward -n backstage svc/backstage 7007:7007
kubectl apply -f k8s/backstage/ -n backstage
kubectl port-forward -n backstage svc/backstage 7007:7007
kubectl apply -f k8s/backstage/ -n backstage
kubectl port-forward -n backstage svc/backstage 7007:7007
kubectl port-forward -n backstage svc/backstage 7007:7007
kubectl apply -f k8s/backstage/ -n backstage
docker build -f packages/backend/Dockerfile . -t us-central1-docker.pkg.dev/prototype-project-name-0db3/dev-docker-repo/backstage:latest
cd gcp-demo
docker build -f packages/backend/Dockerfile . -t us-central1-docker.pkg.dev/prototype-project-name-0db3/dev-docker-repo/backstage:latest
ls
cd backstage-gcp
docker build -f packages/backend/Dockerfile . -t us-central1-docker.pkg.dev/prototype-project-name-0db3/dev-docker-repo/backstage:latest
docker push us-central1-docker.pkg.dev/prototype-project-name-0db3/dev-docker-repo/backstage:latest
kubectl apply -f k8s/backstage/ -n backstage
cd ..
kubectl apply -f k8s/backstage/ -n backstage
docker build -f packages/backend/Dockerfile . -t us-central1-docker.pkg.dev/prototype-project-name-0db3/dev-docker-repo/backstage:latest
yarn install
yarn start
yarn build
ls
cd backstage-gcp
yarn install
yarn start
yarn start
yarn build
yarn start
backend.add(import('@backstage/plugin-catalog-backend'));\
backend.add(import('@backstage/plugin-catalog-backend-module\
'
psql
brew install --cask dbeaver-community
yarn --cwd packages/backend add @backstage/plugin-auth-backend-module-github-provider
yarn start
yarn start
yarn start
curl -o cloud-sql-proxy https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.18.2/cloud-sql-proxy.linux.amd64
ipconfig
yarn start
yarn build
yarn isntall
yarn install
yarn start
ls
cd packages
ls
cd app
yarn build
cd ..
cd ..
yarn start
yarn start
yarn start
yarn start
yarn start
yarn start
yarn start
yarn start
yarn start
yarn start
yarn start
yarn start
yarn start
yarn start
yarn start
yarn start
yarn start
cd ..
cd ..
ls
cd auto_infra_vialto
ls
cd backstage
yarn start
cd ..
cd ..
cd gcp-demo
cd backstage-gcp
yarn start
yarn start
yarn start
yarn start
yarn start
yarn start
yarn start
yarn start
cd ..
cd ..
cd tw-agentic-framework
ls
gemini
ls
cd gcp-demo
ls
cd backstage-gcp
code .
git remote -v
;s
ls
cd ..
ls
cd ..
ls
mkdir kinetic_os
cd kinetic_os
ls
touch ref_arch.tsx
code .
ls
cd ..
ls
cd gcp-demo
ls
zed .
cd ..
git clone git@github.com:twlabs/kinetic-platform.git
cd kinetic-platform
ls
zed .
brew install --cask amazon-q
cd ..
mkdir rabobank_pe
cd rabobank_pe
mv ~/Downloads/rabobank-roadmap.tsx ./
ls
npx tsx rabobank-roadmap.tsx
npx tsx rabobank-roadmap.tsx
npm install -D tsx
npx tsx rabobank-roadmap.tsx
npm install -D react
npx tsx rabobank-roadmap.tsx
ls
nvim package
nvim package.json
ls
npx tsx ./rabobank-roadmap.tsx
npm start
npm install -g tsx
ls
npx tsx ./rabobank-roadmap.tsx
npm install -D lucide-react
npx tsx ./rabobank-roadmap.tsx
ls
nvim package.json
npm start
nvim package.json
npm start
nvim package.json
code .
npm start
nvim package.json
npm start
nvim package.json
npm start
tsx ./rabobank-roadmap.tsx
ls
start
npm start
npm start tsx rabobank-roadmap.tsx
ls
cd node_modules
ls
cd ..
ls
npm install -g ts-browser-klesun
npx tsx ./rabobank-roadmap.tsx
cd ..
ls
cd tw-agentic-framework
ls
code .
claude
cd ..
ls
cd kinetic-platform
ls
zed .
claude
cd ..
ls
mkdir twos-airuntime
cd twos-airuntime
ls
git init
zed .
claude
cd ~
ls -al
cd .config
ls
cd zsh
s
ls
ls -al
nvim .
nvim .
nvim .
nvim .
nvim .
cd ..
ls
cdw
ls
git clone git@github.com:curity-tech-old/backstage-entities.git
cd backstage-entities
code .
git status
git add .
git commit -m "initial creation of all the starting infrastructure for the ai runtime environment"
git push
clear
ls -al
claude
cd ..
cd ..
ls
cd agentic-retail-framework
gemini
cd ..
cd backstage-entities
git status
git add .
git commit -m "added in the agent template into the entties"
git push -u origin main
cd banking_test
ls
cd shared
ls
cd common-libraries
mvn clean install
cd ..
cd agent
ls
touch claude.md
code .
claude
ls
cd template
ls
cd services
ls
cd product-catalog-service
./gradlew bootRun
./scripts/start-local.sh docker
./scripts/start-local.sh docker
./scripts/start-local.sh docker
docker login
./scripts/start-local.sh docker
./scripts/start-local.sh docker
./scripts/start-local.sh docker
claude
./scripts/start-local.sh docker
 docker-compose up
kubectl port-forward -n retail-framework svc/product-catalog-service 8082:8082\

 docker-compose up
claude
./scripts/start-local.sh docker
docker-compose down
git status
git add .
git commit -m "fixed the local build and start up for debugging"
git push -u origin main
git status
claude
git status
git add *.yaml
git status
git add ../customer-service/catalog-info.yaml
git add ../order-service/catalog-info.yaml
git add ../payment-service/catalog-info.yaml
git add ../pricing-service/catalog-info.yaml
git commit -m "added in the the catalog files"
git push -u origin main
clear
cd ..
cd ..
cd cardinal
ls
cd docs
ls
cd ..
cd docs
cd requests
ls
cd ..
cd ..
ls
cd ..
ls
mkdir agentic-retail-framework
cd agentic-retail-framework
touch claude.md
code .
claude
ls
git init
git remote add origin git@github.com:vitrina-new/agentic-retail-framework.git
git status
git add .
git commit -m "initial creation of all the starting infrastructure for the retail use case exploration"
git branch -M main
git push -u origin main
code .
claude
git status
git add .
git commit -m "added in the base draft service for inventory-service"
git push -u origin main
git status
git add .
git commit -m "added the product catalog service"
git push -u origin main
ls
code .
cd ..
cd agent
git init
git remote add origin git@github.com:vitrina-new/agent.git
git branch -M main
git status
git add .
git commit -m "initial creation of the agent template for adk"
git push -u origin main
git rm .DS_Store
git status
git add .
git commit -m "removed a file"
git push -u origin main
cd ..
cd agentic-retail-framework
cd services/product-catalog-service
claude
brew install docker-compose
cd ..
cd ..
cdw
cd backstage-entities
code .
cd ..
ls
cd agentic-retail-framework
kubectl port-forward -n retail-framework svc/product-catalog-service 8082:8082\

ls
cd ..
cd kinetic-platform
ls
cd backstage
yarn install
yarn start
cd ..
ls
cd ..
ls
cd twos-airuntime
ls
claude
cd ..
ls
cd twos-ecosystem
ls
code .
ls
ls
ls
cd terraform
ls
gemini
